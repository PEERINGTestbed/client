#!/bin/bash
set -eu

usage () {
    cat <<-EOF
usage: $0 status|up mux|down mux

status      Show the status of configured OpenVPN tunnels.

up mux      Bring tunnel to mux up.

down mux    Bring tunnel to mux down.

EOF
    exit 0
}

mux_status_check() {
    local mux=$1
    local dev=${mux2dev[$mux]:-unset}
    test $dev != "unset" || die "error [mux $mux unknown]"
    local pidfn="$varrun/$dev.pid"
    if [ ! -s $pidfn ] ; then
        mstat="down"
        return
    fi
    if ! kill -0 $(cat $pidfn) &> /dev/null ; then
        echo "deleting $pidfn: cannot send signal"
        rm $pidfn
        mstat="down"
        return
    fi
    local statfn="$varrun/$dev.status"
    if [ ! -s $statfn ] ; then
        mstat="down"
    else
        mstat=$(head -n 1 $statfn)
    fi
}

test $# -ge 1 || usage
test $EUID -eq 0 || die "OpenVPN requires root access."

declare -A mux2dev
while read mux dev ; do
    mux2dev[$mux]=$dev
done < $mux2dev_db

case $1 in
up)
    test $# -ge 2 || usage
    mux=$2
    mux_status_check $mux
    if [[ $mstat =~ ^up.*$ ]] ; then term "tunnel $mux already up" ; fi
    if ! openvpn --cd $progdir --config $openvpn_cfgs/$mux.conf ; then
        die "openvpn did not start correctly, please check logs"
    fi
    ;;
down)
    test $# -ge 2 || usage
    mux=$2
    mux_status_check $mux
    if [[ $mstat =~ ^down$ ]] ; then term "tunnel $mux already down" ; fi
    dev=${mux2dev[$mux]}
    kill -SIGINT $(cat $varrun/$dev.pid)
    rm -f $varrun/$dev.pid
    rm -f $varrun/$dev.status
    ;;
status)
    for mux in ${!mux2dev[@]} ; do
        mux_status_check $mux
        echo "$mux ${mux2dev[$mux]} $mstat"
    done | sort
    ;;
*)
    usage
    ;;
esac
