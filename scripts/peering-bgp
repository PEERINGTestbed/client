#!/bin/bash
set -eu

usage () {
    cat <<-EOF
usage: $0 cli|start|status|stop|adv mux

cli         Start a BIRD command line interface for interacting with
            the BGP router directly.  Type '?' in the BIRD interface
            to see a list of possible commands.  Use at your own
            risk.

start       Start the BIRD router and establish BGP sessions.  BIRD
            is configured to establish BGP sessions with all PEERING
            muxes through OpenVPN tunnels.  Use OpenVPN to create
            tunnels to the muxes you want BIRD to establish BGP
            sessions with.

status      Show status of BGP sessions.  Sessions in Idle state are
            waiting for their respective OpenVPN tunnels to be
            established.  Sessions in the Established state are
            exchanging routes.

stop        Stop the BIRD daemon and close BGP sessions.

adv mux     Show prefixes being advertised to mux, after export
            filters.

EOF
    exit 0
}

reset_config () {
    rm -rf $bird_routes
    rm -rf $bird_filters
}

remove_ip_rules () {
    table=$1
    while ip $minus6 rule show | grep "$table:" > /dev/null ; do
        ip $minus6 rule del pref $table
    done
}

add_ip_rules () {
    table=$1
    cat $prefix_db | while read pfx ; do
        ip $minus6 rule add from $pfx table $table pref $table
    done
}

test $EUID -eq 0 || die "The BIRD BGP daemon requires root access."
test $# -ge 1 || usage

load_mux2dev
minus6=""

if [[ $1 = v6 ]] ; then
    bird_exec=$bird6_exec
    birdc_exec=$birdc6_exec
    bird_sock=$bird6_sock
    bird_cfgs=$bird6_cfgs
    bird_cfgfile=$bird6_cfgfile
    bird_routes=$bird6_routes
    bird_filters=$bird6_filters
    prefix_db=$prefix6_db
    minus6="-6"
    shift
fi

test $# -ge 1 || usage

case $1 in
cli)
    test -S $bird_sock || die "error [BIRD control socket not found]"
    $birdc_exec -s $bird_sock
    ;;
start)
    test -S $bird_sock && die "error [BIRD control socket exists]"
    reset_config
    mkdir -p $bird_routes
    mkdir -p $bird_filters
    remove_ip_rules $kernel_table
    add_ip_rules $kernel_table
    $bird_exec -c $bird_cfgfile -s $bird_sock
    ;;
status)
    test -S $bird_sock || term "BIRD is down"
    echo "show protocols" | $birdc_exec -s $bird_sock
    ;;
stop)
    if [ -S $bird_sock ] ; then
        if ! $(echo "down" | $birdc_exec -s $bird_sock > /dev/null) ;  then
            echo "BIRD control socket in bad state, deleting."
        fi
        rm -f $bird_sock
    fi
    remove_ip_rules $kernel_table
    reset_config
    ;;
adv)
    test $# -ge 2 || usage
    mux=$2
    test ${mux2dev[$mux]:-unset} != "unset" || die "error [unknown mux: $mux]"
    echo "show route export $mux" | $birdc_exec -s $bird_sock
    ;;
*)
    usage
    ;;
esac
